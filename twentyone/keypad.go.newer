package twentyone

import (
	"bufio"
	"io"
	"math"
	"slices"
	"strconv"
)

type Position struct {
	x, y int
}

// Measures the Manhattan distance to another position
func (a Position) Distance(b Position) (int, int) {
	return a.x - b.x, a.y - b.y
}

// Measures the Manhattan distance to another position
func (a Position) Add(b Position) Position {
	return Position{a.x + b.x, a.y + b.y}
}

//type KeyMap map[rune]Position
//type RevKeyMap map[Position]rune

var KeyPad = map[rune]Position{
	'7': {0, 0}, '8': {0, 1}, '9': {0, 2},
	'4': {1, 0}, '5': {1, 1}, '6': {1, 2},
	'1': {2, 0}, '2': {2, 1}, '3': {2, 2},
	'0': {3, 1}, 'A': {3, 2},
}

var RevKeyPad = ReverseMap(KeyPad)

var DirPad = map[rune]Position{
	'^': {0, 1}, 'A': {0, 2},
	'<': {1, 0}, 'V': {1, 1}, '>': {1, 2},
}

var RevDirPad = ReverseMap(DirPad)

var dirs = map[rune]Position{
	'>': {0, 1},
	'V': {1, 0},
	'<': {0, -1},
	'^': {-1, 0},
}

func ReverseMap[A, B comparable](m map[A]B) (w map[B]A) {
	w = make(map[B]A)
	for r, i := range m {
		w[i] = r
	}
	return
}

func Ways(a, b rune, charToIndex map[rune]Position, indexToChar map[Position]rune) (allPaths []string) {
	DFS(charToIndex[a], charToIndex[b], []rune{}, charToIndex, indexToChar, make(map[Position]bool), &allPaths)
	return
}

func DFS(curr, end Position, path []rune, charToIndex map[rune]Position, indexToChar map[Position]rune, visited map[Position]bool, allPaths *[]string) {
	if curr == end {
		*allPaths = append(*allPaths, string(path)+"A")
		return
	}
	visited[curr] = true
	for char, dir := range dirs {
		nIdx := curr.Add(dir)
		if _, ok := indexToChar[nIdx]; ok && !visited[nIdx] {
			newPath := slices.Clone(path)
			DFS(nIdx, end, append(newPath, char), charToIndex, indexToChar, visited, allPaths)
		}
	}
	visited[curr] = false
}

func GetPairCost(a, b rune, charToIndex map[rune]Position, indexToChar map[Position]rune, depth int) int {

	// We are at the final door;
	// use the door's keypad
	if depth == 0 {
		minLen := math.MaxInt
		for _, path := range Ways(a, b, KeyPad, RevKeyPad) {
			minLen = min(minLen, len(path))
		}
		return minLen
	}

	// Otherwise, continue brooooooting
	allPaths := Ways(a, b, charToIndex, indexToChar)
	minCost := math.MaxInt
	for _, path := range allPaths {
		path = "A" + path
		var currCost int

		for i := 0; i < len(path)-1; i++ {
			currCost += GetPairCost(rune(path[i]), rune(path[i+1]), DirPad, RevDirPad, depth-1)
		}

		minCost = min(minCost, currCost)
	}

	return minCost
}

func getCost(str string, depth int) (res int) {
	for i := 0; i < len(str)-1; i++ {
		currPairCost := GetPairCost(rune(str[i]), rune(str[i+1]), KeyPad, RevKeyPad, depth)
		res += currPairCost
	}
	return
}

func solve(input []string, depth int) (res int) {
	for _, str := range input {
		temp := getCost("A"+str, depth)
		coeff, _ := strconv.Atoi(str[:len(str)-1])
		res += temp * coeff
	}
	return
}

func ParseCodes(r io.Reader) []string {
	var codes []string

	scanner := bufio.NewScanner(r)

	for scanner.Scan() {
		codes = append(codes, scanner.Text())
	}

	return codes
}
